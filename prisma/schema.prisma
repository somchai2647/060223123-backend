// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  STAFF
  ADMIN
}

model User {
  username  String   @id
  fname     String
  lname     String
  tel       String?
  email     String   @unique
  password  String
  token     String?
  points    Int      @default(0)
  address   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  Order     Order[]
  Cart      Cart[]
  Review    Review[]
}

model Products {
  id          String      @id @default(uuid())
  name        String
  desc        String      @db.LongText
  amountpage  Int
  discount    Decimal     @db.Decimal(10, 2)
  price       Decimal     @db.Decimal(10, 2)
  cost        Decimal     @default(0) @db.Decimal(10, 2)
  stock       Int
  stockAlm    Int         @default(0)
  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  String?
  author      Author?     @relation(fields: [authorId], references: [id])
  authorId    String?
  publisher   Publisher?  @relation(fields: [publisherId], references: [id])
  publisherId String?
  image       ImageBook[]
  OrderItem   OrderItem[]
  orderItemId String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isDelete    Boolean     @default(false)
  isRecommend Boolean     @default(false)
  Cart        Cart[]
  Review      Review[]
}

model Category {
  id        String     @id @default(uuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Products  Products[]
}

model ImageBook {
  id         String    @id @default(uuid())
  url        String    @db.LongText
  type       String    @default("OTHER")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Products   Products? @relation(fields: [productsId], references: [id])
  productsId String?
}

model Order {
  id        String      @id @default(uuid())
  status    String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  paymethod String?
  User      User?       @relation(fields: [userId], references: [username])
  userId    String?
  OrderItem OrderItem[]
}

model OrderItem {
  id         String    @id @default(uuid())
  quantity   Int
  price      Decimal   @db.Decimal(10, 2)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Order      Order?    @relation(fields: [orderId], references: [id])
  orderId    String?
  Products   Products? @relation(fields: [productsId], references: [id])
  productsId String?
}

model Review {
  id         String    @id @default(uuid())
  comment    String    @db.LongText
  rating     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Products   Products? @relation(fields: [productsId], references: [id])
  productsId String?
  User       User?     @relation(fields: [userId], references: [username])
  userId     String?
}

model Author {
  id        String     @id @default(uuid())
  name      String
  email     String
  Products  Products[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Publisher {
  id        String     @id @default(uuid())
  name      String
  address   String
  tel       String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Products  Products[]
}

model Cart {
  id         String    @id @default(uuid())
  quantity   Int       @default(1)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  Products   Products? @relation(fields: [productsId], references: [id])
  productsId String?
  User       User?     @relation(fields: [userId], references: [username])
  userId     String?
}
